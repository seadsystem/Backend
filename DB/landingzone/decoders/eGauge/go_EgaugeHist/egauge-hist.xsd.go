//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		raw.githubusercontent.com/seadsystem/Backend/master/DB/landingzone/decoders/eGaugeDecoders/egauge-hist.xsd
package go_EgaugeHist

type XsdGoPkgHasAttr_Serial_Tstring_ struct {
	Serial Tstring `xml:"http://www.w3.org/namespace/ serial,attr"`
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCname struct {
	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdCname function is not nil (ie. was set by outside code), calls it with this TxsdCname instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdCname instance.
func (me *TxsdCname) Walk() (err error) {
	if fn := WalkHandlers.TxsdCname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Cname struct {
	Cnames []*TxsdCname `xml:"http://www.w3.org/namespace/ cname"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cname instance.
func (me *XsdGoPkgHasElems_Cname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Cname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cnames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_C struct {
	Cs []*TxsdCname `xml:"http://www.w3.org/namespace/ c"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_C function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_C instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_C instance.
func (me *XsdGoPkgHasElems_C) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_C; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdR struct {
	XsdGoPkgHasElems_C
}

//	If the WalkHandlers.TxsdR function is not nil (ie. was set by outside code), calls it with this TxsdR instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdR instance.
func (me *TxsdR) Walk() (err error) {
	if fn := WalkHandlers.TxsdR; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_C.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_R struct {
	Rs []*TxsdR `xml:"http://www.w3.org/namespace/ r"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_R function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_R instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_R instance.
func (me *XsdGoPkgHasElems_R) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_R; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Delta_Tstring_ struct {
	Delta Tstring `xml:"http://www.w3.org/namespace/ delta,attr"`
}

type TxsdData struct {
	XsdGoPkgHasElems_Cname

	XsdGoPkgHasElems_R

	XsdGoPkgHasAttr_Delta_Tstring_
}

//	If the WalkHandlers.TxsdData function is not nil (ie. was set by outside code), calls it with this TxsdData instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdData instance.
func (me *TxsdData) Walk() (err error) {
	if fn := WalkHandlers.TxsdData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Cname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_R.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Data struct {
	Datas []*TxsdData `xml:"http://www.w3.org/namespace/ data"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Data instance.
func (me *XsdGoPkgHasElems_Data) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Datas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGroup struct {
	XsdGoPkgHasElems_Data

	XsdGoPkgHasAttr_Serial_Tstring_
}

//	If the WalkHandlers.TxsdGroup function is not nil (ie. was set by outside code), calls it with this TxsdGroup instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdGroup instance.
func (me *TxsdGroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Group struct {
	Group *TxsdGroup `xml:"http://www.w3.org/namespace/ group"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Group instance.
func (me *XsdGoPkgHasElem_Group) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Group; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Group.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Group struct {
	Groups []*TxsdGroup `xml:"http://www.w3.org/namespace/ group"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Group function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Group instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Group instance.
func (me *XsdGoPkgHasElems_Group) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Group; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Groups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Data struct {
	Data *TxsdData `xml:"http://www.w3.org/namespace/ data"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Data function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Data instance.
func (me *XsdGoPkgHasElem_Data) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Cname struct {
	Cname *TxsdCname `xml:"http://www.w3.org/namespace/ cname"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cname function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cname instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cname instance.
func (me *XsdGoPkgHasElem_Cname) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Cname; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cname.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_R struct {
	R *TxsdR `xml:"http://www.w3.org/namespace/ r"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_R function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_R instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_R instance.
func (me *XsdGoPkgHasElem_R) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_R; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.R.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_C struct {
	C *TxsdCname `xml:"http://www.w3.org/namespace/ c"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_C function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_C instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_C instance.
func (me *XsdGoPkgHasElem_C) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_C; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.C.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 15 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 15 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	TxsdData               func(*TxsdData, bool) error
	XsdGoPkgHasElems_Data  func(*XsdGoPkgHasElems_Data, bool) error
	XsdGoPkgHasElem_Group  func(*XsdGoPkgHasElem_Group, bool) error
	XsdGoPkgHasElem_Data   func(*XsdGoPkgHasElem_Data, bool) error
	XsdGoPkgHasCdata       func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_C     func(*XsdGoPkgHasElems_C, bool) error
	XsdGoPkgHasElems_Cname func(*XsdGoPkgHasElems_Cname, bool) error
	TxsdR                  func(*TxsdR, bool) error
	TxsdGroup              func(*TxsdGroup, bool) error
	XsdGoPkgHasElems_Group func(*XsdGoPkgHasElems_Group, bool) error
	XsdGoPkgHasElem_R      func(*XsdGoPkgHasElem_R, bool) error
	TxsdCname              func(*TxsdCname, bool) error
	XsdGoPkgHasElems_R     func(*XsdGoPkgHasElems_R, bool) error
	XsdGoPkgHasElem_Cname  func(*XsdGoPkgHasElem_Cname, bool) error
	XsdGoPkgHasElem_C      func(*XsdGoPkgHasElem_C, bool) error
}
