// Code generated by protoc-gen-go.
// source: packet/packet.proto
// DO NOT EDIT!

/*
Package packet is a generated protocol buffer package.

It is generated from these files:
	packet/packet.proto

It has these top-level messages:
	Timestamp
	Packet
	Status
*/
package packet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A Timestamp represents a UTC time.
type Timestamp struct {
	// Represents seconds of UTC time since Unix epoch.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Represents nanosecond offset from seconds.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// A Packet is a single bundle of data of a single type from a single device.
type Packet struct {
	// serial represents the serial number of the device.
	Serial int64 `protobuf:"varint,1,opt,name=serial" json:"serial,omitempty"`
	// time represents the timestamp of the first datapoint.
	Time *Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// delta represents the nanosecond time delta between data points.
	Delta int64 `protobuf:"varint,3,opt,name=delta" json:"delta,omitempty"`
	// type represents the data type. Must be a single character.
	Type string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	// device represents the name of the device. Optional.
	Device string `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	// data represents the data points.
	Data []int64 `protobuf:"zigzag64,6,rep,packed,name=data" json:"data,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Packet) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

// A Status represents the status of an RPC.
type Status struct {
	// success represents whether or not the RPC was successful. True means that it was, false means that it was not.
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// msg is an optional error message.
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Timestamp)(nil), "Timestamp")
	proto.RegisterType((*Packet)(nil), "Packet")
	proto.RegisterType((*Status)(nil), "Status")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LandingZone service

type LandingZoneClient interface {
	// SendPacket stores a Packet in the database.
	SendPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Status, error)
}

type landingZoneClient struct {
	cc *grpc.ClientConn
}

func NewLandingZoneClient(cc *grpc.ClientConn) LandingZoneClient {
	return &landingZoneClient{cc}
}

func (c *landingZoneClient) SendPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/LandingZone/SendPacket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LandingZone service

type LandingZoneServer interface {
	// SendPacket stores a Packet in the database.
	SendPacket(context.Context, *Packet) (*Status, error)
}

func RegisterLandingZoneServer(s *grpc.Server, srv LandingZoneServer) {
	s.RegisterService(&_LandingZone_serviceDesc, srv)
}

func _LandingZone_SendPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandingZoneServer).SendPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LandingZone/SendPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandingZoneServer).SendPacket(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _LandingZone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LandingZone",
	HandlerType: (*LandingZoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _LandingZone_SendPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("packet/packet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x14, 0x84, 0x49, 0x93, 0x38, 0xe4, 0x75, 0xa9, 0x0c, 0x42, 0x16, 0x03, 0x8a, 0x32, 0x75, 0x4a,
	0xa5, 0xc2, 0xc6, 0xc6, 0xcc, 0x80, 0x5c, 0x26, 0x36, 0x63, 0x3f, 0x55, 0x11, 0x8d, 0x1d, 0xd5,
	0x2e, 0x12, 0x7f, 0x85, 0x5f, 0x8b, 0xf3, 0x9c, 0x30, 0xe5, 0xbe, 0x93, 0xee, 0x5e, 0xce, 0x70,
	0x33, 0x2a, 0xfd, 0x85, 0x61, 0x97, 0x3e, 0xdd, 0x78, 0x76, 0xc1, 0xb5, 0xcf, 0x50, 0xbf, 0xf7,
	0x03, 0xfa, 0xa0, 0x86, 0x91, 0x0b, 0xa8, 0x3c, 0x6a, 0x67, 0x8d, 0x17, 0x59, 0x93, 0x6d, 0x73,
	0xb9, 0x20, 0xbf, 0x85, 0xd2, 0x2a, 0xeb, 0xbc, 0x58, 0x45, 0xbf, 0x94, 0x09, 0xda, 0xdf, 0x0c,
	0xd8, 0x1b, 0xb5, 0xf1, 0x3b, 0x60, 0x1e, 0xcf, 0xbd, 0x3a, 0xcd, 0xc9, 0x99, 0xf8, 0x03, 0x14,
	0x21, 0xf6, 0x53, 0x6e, 0xbd, 0x87, 0xee, 0xff, 0x98, 0x24, 0x7f, 0x2a, 0x36, 0x78, 0x0a, 0x4a,
	0xe4, 0x14, 0x4b, 0xc0, 0x79, 0x4c, 0xfd, 0x8c, 0x28, 0x8a, 0x68, 0xd6, 0x92, 0xf4, 0x74, 0xc1,
	0xe0, 0x77, 0xaf, 0x51, 0x94, 0xe4, 0xce, 0x14, 0xfd, 0xc2, 0xa8, 0x58, 0xc0, 0x9a, 0x7c, 0xcb,
	0x5f, 0x56, 0x9b, 0x4c, 0x12, 0xb7, 0x4f, 0xc0, 0x0e, 0x41, 0x85, 0x8b, 0xa7, 0x59, 0x17, 0xad,
	0xd1, 0xa7, 0x59, 0xd7, 0x72, 0x41, 0xbe, 0x81, 0x7c, 0xf0, 0x47, 0xfa, 0xb9, 0x5a, 0x4e, 0x72,
	0xbf, 0x83, 0xf5, 0xab, 0xb2, 0xa6, 0xb7, 0xc7, 0x0f, 0x67, 0x91, 0x37, 0x00, 0x07, 0xb4, 0x66,
	0x1e, 0x59, 0x75, 0x49, 0xdc, 0x57, 0x5d, 0xaa, 0x6e, 0xaf, 0x3e, 0x19, 0xbd, 0xe3, 0xe3, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0xda, 0x19, 0xc9, 0x5e, 0x01, 0x00, 0x00,
}
